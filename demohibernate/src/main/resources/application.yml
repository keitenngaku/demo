#数据源配置
spring:
  datasource:
    #rewriteBatchedStatements=true 必须要配置，极大的提升了批量数据处理的效率，配合batch_size使用
    #MySQL Jdbc驱动在默认情况下会无视executeBatch()语句，把我们期望批量执行的一组sql语句拆散，一条一条地发给MySQL数据库，直接造成较低的性能
    url: jdbc:mysql://172.23.55.94:8066/TESTDB?useUnicode=true&characterEncoding=utf-8&rewriteBatchedStatements=true
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    initialSize: 9
    # 最小连接池数量
    minIdle: 9
    # 最大连接池数量
    maxActive: 200
    # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置
    maxWait: 60000
    # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
    timeBetweenEvictionRunsMillis: 60000
    # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间
    minEvictableIdleTimeMillis: 30000
    # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun
    testWhileIdle: true
    # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL
    validationQuery: SELECT 1
    # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnBorrow: false
    # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 连接出错后再尝试连接三次
    connectionErrorRetryAttempts: 3
    # 数据库服务宕机自动重连机制
    breakAfterAcquireFailure: true
    # 连接出错后重试时间间隔
    timeBetweenConnectErrorMillis: 300000
    # 异步初始化策略
    asyncInit: true
    # 是否自动回收超时连接
    remove-abandoned: true
    # 超时时间(以秒数为单位)
    remove-abandoned-timeout: 1800
    # 事务超时时间
    transaction-query-timeout: 6000
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: false
    stat-view-servlet:
      login-username: admin
      login-password: admin
  jpa:
    database: MYSQL
    show-sql: false
    hibernate:
      #create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
      #create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
      #update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
      #validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    # 数据库方言
    database-platform: org.hibernate.dialect.MySQL5Dialect
    properties:
      hibernate:
        jdbc:
          batch_size: 20000
          batch_versioned_data: true
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext

